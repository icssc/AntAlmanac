name: "Deploy Pull Request"

on: 
  pull_request:
      types: [opened, synchronize, unlabeled]

permissions:
  id-token: write
  contents: read
  deployments: write
  pull-requests: write
    
concurrency:
  group: ${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  deploy:
    if: (!contains(github.event.pull_request.labels.*.name, 'no deploy'))
    runs-on: ubuntu-latest
    env: 
      STACK_NAME: github-actions-stack-${{ github.event.pull_request.number }}
      # env variables for Node.js
      HOSTED_ZONE_ID: ${{ secrets.HOSTED_ZONE_ID }}
      CERTIFICATE_ARN: ${{ secrets.CERTIFICATE_ARN }}
      PR_NUM: ${{ github.event.pull_request.number }}

    steps: 
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
        
      - name: checkout antalmanac
        uses: actions/checkout@v3
      
      - name: install node dependencies frontend
        uses: bahmutov/npm-install@v1

      - name: install node dependencies cdk
        uses: bahmutov/npm-install@v1
        with:
          working-directory: .github/workflows/actions_stack

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-duration-seconds: 2400
      
      - name: build frontend
        run: npm run build

      - name: build CDK
        working-directory: ./.github/workflows/actions_stack
        run: npm run build

      - name: check if stack exists
        id: check-stack-exists
        run: echo ::set-output name=stack_status::$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[1].StackStatus" --output text)
        continue-on-error: true

      - name: wait for stack create
        id: wait-for-stack-create
        if: steps.check-stack-exists.outcome == 'success' && steps.check-stack-exists.outputs.stack_status == 'CREATE_IN_PROGRESS'
        run: aws cloudformation wait stack-create-complete --stack-name ${{ env.STACK_NAME }}
        continue-on-error: true
          
      - name: wait for stack update
        id: wait-for-stack-update
        if: steps.check-stack-exists.outcome == 'success' && steps.check-stack-exists.outputs.stack_status == 'UPDATE_IN_PROGRESS'
        run: aws cloudformation wait stack-update-complete --stack-name ${{ env.STACK_NAME }}
        continue-on-error: true

      - name: deploy the stack to AWS
        working-directory: ./.github/workflows/actions_stack
        run: npx aws-cdk deploy ${{ env.STACK_NAME }} --require-approval never
          
      - name: comment staging url
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: staging url
          recreate: true
          message: Deployed staging instance to https://staging-${{ github.event.pull_request.number }}.antalmanac.com
