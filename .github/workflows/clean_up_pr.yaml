name: "Pull Request Clean Up"

on:
  pull_request:
    types: [closed, labeled]
    

permissions:
  id-token: write
  contents: read
  deployments: write
  repository-projects: write

jobs:
  clean-up:
    if: (github.event.action == 'labeled' && github.event.label.name == 'no deploy') || github.event.action == 'closed'
    runs-on: ubuntu-latest
    env:
      STACK_NAME: github-actions-stack-${{ github.event.pull_request.number }}
      # env variables for Node.js
      HOSTED_ZONE_ID: ${{ secrets.HOSTED_ZONE_ID }}
      CERTIFICATE_ARN: ${{ secrets.CERTIFICATE_ARN }}
      PR_NUM: ${{ github.event.pull_request.number }}

    steps:
      - name: inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      - name: set STAGE variable in environment for next steps
        run: echo "STAGE=pr-${{ github.event.pull_request.number }}-${{ env.GITHUB_HEAD_REF_SLUG }}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: ${{ secrets.ACTIONS_IAM_ROLE }}
          aws-region: us-east-1

      - name: check if stack exists
        id: check-stack-exists

      - name: delete the stack from AWS
        if: steps.check-stack-exists.outcome == 'success'
        run: aws cloudformation delete-stack --stack-name ${{ env.STACK_NAME }}
        
      - name: wait for stack delete
        id: wait-for-stack-delete
        if: steps.check-stack-exists.outcome == 'success'
        run: aws cloudformation wait stack-delete-complete --stack-name ${{ env.STACK_NAME }}

      - name: update the github deployment status
        uses: bobheadxi/deployments@v0.5.2
        with:
          step: deactivate-env
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{ env.STAGE }}

      # add back in the future if we change to personal access Github token
      # - name: delete the github deployments and the corresponding environment
      #   uses: strumwolf/delete-deployment-environment@v2
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     environment: ${{ env.STAGE }}
      